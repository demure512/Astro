---
// 当前路由
const { activeNav } = Astro.props;
// 站点配置
import SITE_CONFIG from "@/config";
const { Navs } = SITE_CONFIG;
// Svg 组件
import Svg from "@/components/Svg/Svg.astro";
// 搜索框组件
import Search from "@/components/Search/Search.astro";
// 顶部 Header 样式
import "./Header.less";

// Get current path from Astro for exact matching
const currentPath = Astro.url.pathname;
---

<header class="vh-header">
	<section class="main">
		<a href="/" class="home vh-hover">
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M19 8.71l-5.333 -4.148a2.666 2.666 0 0 0 -3.274 0l-5.334 4.148a2.665 2.665 0 0 0 -1.029 2.105v7.2a2 2 0 0 0 2 2h12a2 2 0 0 0 2 -2v-7.2c0 -.823 -.38 -1.6 -1.03 -2.105"></path><path d="M16 15c-2.21 1.333 -5.792 1.333 -8 0"></path></svg>
			<span>Home</span>
		</a>
		<nav>
			{
				Navs.map(i => {
					// For the exact match (remove trailing slash from both for comparison)
					const cleanCurrentPath = currentPath.endsWith('/') ? currentPath.slice(0, -1) : currentPath;
					const cleanItemPath = i.link.endsWith('/') ? i.link.slice(0, -1) : i.link;
					const isActive = cleanCurrentPath === cleanItemPath || 
								   (cleanItemPath !== '/' && cleanCurrentPath.startsWith(cleanItemPath));
					
					return (
						<a class={`nav-link vh-hover${isActive ? " active" : ""}`} href={i.link} target={i.target ? "_blank" : "_self"}>
							{i.text}
							<Svg src={i.icon} />
						</a>
					);
				})
			}
			<span class="nav-link vh-hover search-btn"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M10 10m-7 0a7 7 0 1 0 14 0a7 7 0 1 0 -14 0"></path><path d="M21 21l-6 -6"></path></svg> 搜索</span>
			<span class="nav-link vh-hover menu-btn"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M4 6h16"></path><path d="M7 12h13"></path><path d="M10 18h10"></path></svg></span>
		</nav>
		<Search />
	</section>
</header>

<script>
	// When the page loads, update active states based on current path
	document.addEventListener('DOMContentLoaded', updateActiveNavs);
	document.addEventListener('astro:page-load', updateActiveNavs);
	
	function updateActiveNavs() {
		const currentPath = window.location.pathname;
		console.log('Current pathname in header:', currentPath);
		
		// Update active state for navigation links
		document.querySelectorAll('.vh-header .nav-link').forEach(link => {
			// Skip search and menu buttons
			if (link.classList.contains('search-btn') || link.classList.contains('menu-btn')) {
				return;
			}
			
			const href = link.getAttribute('href');
			if (!href) return;
			
			// Clean paths for comparison
			const cleanCurrentPath = currentPath.endsWith('/') ? currentPath.slice(0, -1) : currentPath;
			const cleanItemPath = href.endsWith('/') ? href.slice(0, -1) : href;
			
			// Check if this link should be active
			const isActive = cleanCurrentPath === cleanItemPath || 
						   (cleanItemPath !== '/' && cleanCurrentPath.startsWith(cleanItemPath));
			
			if (isActive) {
				link.classList.add('active');
			} else {
				link.classList.remove('active');
			}
		});
	}
	
	// 页面加载完成后执行初始化
	document.addEventListener('DOMContentLoaded', initializeHeader);
	
	// 当页面通过前端路由切换时，可能需要重新初始化
	document.addEventListener('astro:page-load', initializeHeader);
	
	function initializeHeader() {
		// 清除可能存在的旧事件监听器
		const dropdowns = document.querySelectorAll('.dropdown');
		
		// 为所有下拉菜单添加点击事件
		dropdowns.forEach(dropdown => {
			// 确保事件不会重复绑定
			dropdown.removeEventListener('click', dropdownClickHandler);
			dropdown.addEventListener('click', dropdownClickHandler);
			
			// 为下拉按钮单独添加事件处理
			const toggle = dropdown.querySelector('.dropdown-toggle');
			if (toggle) {
				toggle.removeEventListener('click', toggleClickHandler);
				toggle.addEventListener('click', toggleClickHandler);
			}
		});
		
		// 确保点击文档其他位置时关闭下拉菜单
		document.removeEventListener('click', documentClickHandler);
		document.addEventListener('click', documentClickHandler);
		
		// 确保下拉菜单中的链接正常工作
		document.querySelectorAll('.dropdown-item').forEach(item => {
			item.removeEventListener('click', itemClickHandler);
			item.addEventListener('click', itemClickHandler);
		});
	}
	
	// 下拉菜单点击处理函数
	function dropdownClickHandler(e) {
		e.preventDefault();
		e.stopPropagation();
	}
	
	// 下拉按钮点击处理函数
	function toggleClickHandler(e) {
		e.preventDefault();
		e.stopPropagation();
		const dropdown = this.closest('.dropdown');
		dropdown.classList.toggle('show');
	}
	
	// 文档点击处理函数 - 关闭所有下拉菜单
	function documentClickHandler() {
		document.querySelectorAll('.dropdown.show').forEach(dropdown => {
			dropdown.classList.remove('show');
		});
	}
	
	// 下拉菜单项点击处理函数
	function itemClickHandler(e) {
		e.stopPropagation();
	}
</script>